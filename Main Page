from tkinter import *
from tkinter import messagebox
from tkinter.filedialog import asksaveasfilename, askopenfile
from PIL import ImageTk,Image
from random import randint
import os

def createopen():

    def saveas():
        t = str(typesomething.get())
        savelocation = asksaveasfilename()
        file1=open(savelocation, "w+")
        file1.write(t)
        file1.close()
        typesomething.delete(0, END)
        answer = messagebox.askokcancel("Pop-Up","You have successfully created a file!\nDo you want to create another?")
        if (answer == False):
            something.destroy()

    def clearentry():
        typesomething.delete(0, END)
    
    something = Tk()
    something.title("File Creator")
    something.geometry("500x100")

    bad = Button(something,text="Discard",command=clearentry)
    bad.grid(row=0,column=1)
    good = Button(something,text="Save",command=saveas)
    good.grid(row=0,column=2)
    ready = Button(something,text="Publish")
    ready.grid(row=0,column=3)
    back = Button(something,text="Home",command=landingpage)
    back.grid(row=0,column=4)

    instructions = Label(something,text="feel free to write your ideas")
    instructions.grid(row=1,column=0)
    typesomething = Entry(something)
    typesomething.grid(row=1,column=1,rowspan=4,columnspan=4)

def viewopen():
    gallery = Tk()
    gallery.title("Text From Chosen File")
    gallery.geometry("800x500")

    try:
        filei = askopenfile(mode="r")
        remember = filei.readlines()
        filei.close()
        l1 = Label(gallery,text=remember).pack()
    except FileNotFoundError:
        l1 = "please choose a file"

def otheropen():
    
    def badgame():
        cwidth = 300
        cheight = 300
        herosize = 30
        heromove = 10
        hero_x = randint(0,cwidth)
        hero_y = randint(0,cheight)

        def redraw():
            c1.delete("all")
            c1.create_oval(hero_x, hero_y, hero_x + herosize, hero_y + herosize)

        def moveleft(Event):
            global hero_x
            hero_x = hero_x - heromove
            c1.after(1,redraw)

        def moveright(Event):
            global hero_x
            hero_x = hero_x + heromove
            c1.after(1,redraw)

        def moveup(Event):
            global hero_y
            hero_y = hero_y - heromove
            c1.after(1,redraw)

        def movedown(Event):
            global hero_y
            hero_y = hero_y + heromove
            c1.after(1,redraw)

        root = Tk()
        root.title("You found this easter egg")

        c1 = Canvas(root,width=cwidth,heigh=cheight)
        c1.pack()
        c1.after(1,redraw)

        root.bind('<Left>',moveleft)
        root.bind('<Right>',moveright)
        root.bind('<Up>',moveup)
        root.bind('<Down>',movedown)
    
    more = Tk()
    more.title("Look At These Options")
    more.geometry("365x22")

    oh_no = Button(more,text="This section doesn't exist yet. Version 2.0 coming soon",command=badgame)
    oh_no.grid(row=0,column=0)

def landingpage():

    def change():
        global rng
        global words
        rng = randint(1,10)
        print(rng)
        if (rng == 1):
            words = "big and lazy" + " (click again to change)"
        else:
            words = "quote" + str(rng) + " (click again to change)"
        quote.config(text=words)

    def closeall():
        landing.destroy()

    landing = Tk()
    landing.title("Home")
    landing.geometry("850x270")

    words = "click to see quote of the day"
    rng = randint(1,10)

    leftframe = Frame(landing,width=300,height=300)
    leftframe.grid(row=0,column=0)
    createbutton = Button(leftframe,text="CREATE",width="45",height="4",font=("Calibri", 13),command=createopen)
    createbutton.pack()
    viewbutton = Button(leftframe,text="VIEW",width="45",height="4",font=("Calibri", 13),command=viewopen)
    viewbutton.pack()
    otherbutton = Button(leftframe,text="OTHER",width="45",height="4",font=("Calibri", 13),command=otheropen)
    otherbutton.pack()
    quitbutton = Button(leftframe,text="QUIT",width="45",height="4",font=("Calibri", 13),command=closeall)
    quitbutton.pack()

    spacing = Frame(landing,width=25)
    spacing.grid(row=0,column=1)

    visual = Frame(landing,borderwidth = 1.5,relief=RAISED,width=400,height=150)
    visual.grid(row=0,column=2)
    quote = Button(visual,text=words,command=change)
    quote.grid(row=0,column=0)
    can = Canvas(visual,height=150,width=200)
    can.grid(row=0,column=1)
    myimage = Image.open("") # Enter an image here
    myimage = myimage.resize((200, 150),Image.ANTIALIAS)
    myimg = ImageTk.PhotoImage(myimage)
    can.create_image(0,0,image=myimg,anchor=NW)

def register():

    def register_user():

        def createFolder(directory):
            try:
                os.makedirs(directory)
            except OSError:
                print('Error: Creating directory. ' +  directory)

        username_info = username.get()
        password_info = password.get()
        
        work = "/Users/hewitt.ho/Documents/Everything/"  + str(username_info) # Enter Any Directory
        print(work)
        
        if os.path.exists(work):
            username_entry.delete(0, END)
            password_entry.delete(0, END)
            Label(register_screen,text="Registration Failure - This Username Has Been Taken",fg="red",font=("calibri", 11)).pack()
        else:
            createFolder(work)
            # Creates a folder in the directory with the same name as the username
        
            file = open(username_info,"w")
            file.write(username_info + "\n")
            file.write(password_info)
            file.close()

            username_entry.delete(0, END)
            password_entry.delete(0, END)

            Label(register_screen,text="Registration Success",fg="green",font=("calibri", 11)).pack()
    
    global register_screen
    register_screen = Toplevel(main_screen)
    register_screen.title("Register")
    register_screen.geometry("300x250")

    global username
    global password
    global username_entry
    global password_entry
    username = StringVar()
    password = StringVar()

    Label(register_screen,text="Please enter details below",bg="blue").pack()
    Label(register_screen,text="").pack()
    username_lable = Label(register_screen,text="Username * ")
    username_lable.pack()
    username_entry = Entry(register_screen,textvariable=username)
    username_entry.pack()
    password_lable = Label(register_screen,text="Password * ")
    password_lable.pack()
    password_entry = Entry(register_screen,textvariable=password, show='*')
    password_entry.pack()
    Label(register_screen,text="").pack()
    Button(register_screen,text="Register",width=10,height=1,bg="blue",command=register_user).pack()

def login():
    
    def login_verify():
        username1 = username_verify.get()
        password1 = password_verify.get()
        username_login_entry.delete(0, END)
        password_login_entry.delete(0, END)

        list_of_files = os.listdir()
        if username1 in list_of_files:
            file1 = open(username1,"r")
            verify = file1.read().splitlines()
            if password1 in verify:
               landingpage()
            else:
                password_not_recognised()
        else:
            user_not_found()

    global login_screen
    login_screen = Toplevel(main_screen)
    login_screen.title("Login")
    login_screen.geometry("300x250")
    Label(login_screen,text="Please enter details below to login").pack()
    Label(login_screen,text="").pack()

    global username_verify
    global password_verify

    username_verify = StringVar()
    password_verify = StringVar()

    global username_login_entry
    global password_login_entry

    Label(login_screen,text="Username * ").pack()
    username_login_entry = Entry(login_screen,textvariable=username_verify)
    username_login_entry.pack()
    Label(login_screen,text="").pack()
    Label(login_screen,text="Password * ").pack()
    password_login_entry = Entry(login_screen,textvariable=password_verify,show='*')
    password_login_entry.pack()
    Label(login_screen,text="").pack()
    Button(login_screen,text="Login",width=10,height=1,command = login_verify).pack()

def password_not_recognised():

    def delete_password_not_recognised():
        password_not_recog_screen.destroy()
    
    global password_not_recog_screen
    password_not_recog_screen = Toplevel(login_screen)
    password_not_recog_screen.title("Success")
    password_not_recog_screen.geometry("150x100")
    Label(password_not_recog_screen,text="Invalid Password ").pack()
    Button(password_not_recog_screen,text="OK",command=delete_password_not_recognised).pack()
 
def user_not_found():

    def delete_user_not_found_screen():
        user_not_found_screen.destroy()

    global user_not_found_screen
    user_not_found_screen = Toplevel(login_screen)
    user_not_found_screen.title("Success")
    user_not_found_screen.geometry("150x100")
    Label(user_not_found_screen,text="User Not Found").pack()
    Button(user_not_found_screen,text="OK",command=delete_user_not_found_screen).pack()

def main_account_screen():
    global main_screen
    main_screen = Tk()
    main_screen.geometry("300x250")
    main_screen.title("Account Login")
    Label(text="Select Your Choice", bg="blue", width="300", height="2", font=("Calibri", 13)).pack()
    Label(text="").pack()
    Button(text="Login", height="2",width="30",command=login).pack()
    Label(text="").pack()
    Button(text="Register",height="2",width="30",command=register).pack()

    main_screen.mainloop()

main_account_screen()
